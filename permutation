int n = nums.length;
        int i = n - 2;

        // Find the first index i from the right such that nums[i] > nums[i-1]
        while (i >= 0 && nums[i] >= nums[i + 1]) {
            i--;
        }

        // If no such index exists, reverse the array to get the lowest possible order
        if (i == -1) {
            reverse(nums, 0, n - 1);
            return;
        }

        // Find the smallest element in the subarray nums[i:] that is greater than nums[i-1]
        int j = n - 1;
        while (j > i && nums[j] <= nums[i]) {
            j--;
        }

        // Swap nums[i-1] with nums[j]
        swap(nums, i, j);

        // Reverse the subarray nums[i:] to get the next permutation
        reverse(nums, i + 1, n - 1);
    }

    private void reverse(int[] nums, int start, int end) {
        while (start < end) {
            swap(nums, start, end);
            start++;
            end--;
        }
    }

    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp
